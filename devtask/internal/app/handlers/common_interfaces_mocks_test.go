// Code generated by MockGen. DO NOT EDIT.
// Source: ./common_interfaces.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	model "devtask/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStoragePVZ is a mock of StoragePVZ interface.
type MockStoragePVZ struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePVZMockRecorder
}

// MockStoragePVZMockRecorder is the mock recorder for MockStoragePVZ.
type MockStoragePVZMockRecorder struct {
	mock *MockStoragePVZ
}

// NewMockStoragePVZ creates a new mock instance.
func NewMockStoragePVZ(ctrl *gomock.Controller) *MockStoragePVZ {
	mock := &MockStoragePVZ{ctrl: ctrl}
	mock.recorder = &MockStoragePVZMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePVZ) EXPECT() *MockStoragePVZMockRecorder {
	return m.recorder
}

// AddInfo mocks base method.
func (m *MockStoragePVZ) AddInfo(ctx context.Context, pvz model.PVZ) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInfo", ctx, pvz)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInfo indicates an expected call of AddInfo.
func (mr *MockStoragePVZMockRecorder) AddInfo(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInfo", reflect.TypeOf((*MockStoragePVZ)(nil).AddInfo), ctx, pvz)
}

// DeleteInfo mocks base method.
func (m *MockStoragePVZ) DeleteInfo(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInfo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInfo indicates an expected call of DeleteInfo.
func (mr *MockStoragePVZMockRecorder) DeleteInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInfo", reflect.TypeOf((*MockStoragePVZ)(nil).DeleteInfo), ctx, id)
}

// GetInfo mocks base method.
func (m *MockStoragePVZ) GetInfo(ctx context.Context, id int64) (*model.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, id)
	ret0, _ := ret[0].(*model.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockStoragePVZMockRecorder) GetInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockStoragePVZ)(nil).GetInfo), ctx, id)
}

// ListInfo mocks base method.
func (m *MockStoragePVZ) ListInfo(ctx context.Context) ([]model.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInfo", ctx)
	ret0, _ := ret[0].([]model.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInfo indicates an expected call of ListInfo.
func (mr *MockStoragePVZMockRecorder) ListInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInfo", reflect.TypeOf((*MockStoragePVZ)(nil).ListInfo), ctx)
}

// UpdateInfo mocks base method.
func (m *MockStoragePVZ) UpdateInfo(ctx context.Context, pvz *model.PVZ, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", ctx, pvz, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInfo indicates an expected call of UpdateInfo.
func (mr *MockStoragePVZMockRecorder) UpdateInfo(ctx, pvz, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockStoragePVZ)(nil).UpdateInfo), ctx, pvz, id)
}
