// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/devtask/pvz/v1/pvz.proto

package devtask_pvz_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PVZ_AddInfo_FullMethodName    = "/devtask.pvz.v1.PVZ/AddInfo"
	PVZ_DeleteInfo_FullMethodName = "/devtask.pvz.v1.PVZ/DeleteInfo"
	PVZ_GetInfo_FullMethodName    = "/devtask.pvz.v1.PVZ/GetInfo"
	PVZ_ListInfo_FullMethodName   = "/devtask.pvz.v1.PVZ/ListInfo"
	PVZ_UpdateInfo_FullMethodName = "/devtask.pvz.v1.PVZ/UpdateInfo"
)

// PVZClient is the client API for PVZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZClient interface {
	AddInfo(ctx context.Context, in *AddInfoRequest, opts ...grpc.CallOption) (*AddInfoResponse, error)
	DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...grpc.CallOption) (*DeleteInfoResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	ListInfo(ctx context.Context, in *ListInfoRequest, opts ...grpc.CallOption) (*ListInfoResponse, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoResponse, error)
}

type pVZClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZClient(cc grpc.ClientConnInterface) PVZClient {
	return &pVZClient{cc}
}

func (c *pVZClient) AddInfo(ctx context.Context, in *AddInfoRequest, opts ...grpc.CallOption) (*AddInfoResponse, error) {
	out := new(AddInfoResponse)
	err := c.cc.Invoke(ctx, PVZ_AddInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...grpc.CallOption) (*DeleteInfoResponse, error) {
	out := new(DeleteInfoResponse)
	err := c.cc.Invoke(ctx, PVZ_DeleteInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, PVZ_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) ListInfo(ctx context.Context, in *ListInfoRequest, opts ...grpc.CallOption) (*ListInfoResponse, error) {
	out := new(ListInfoResponse)
	err := c.cc.Invoke(ctx, PVZ_ListInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoResponse, error) {
	out := new(UpdateInfoResponse)
	err := c.cc.Invoke(ctx, PVZ_UpdateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServer is the server API for PVZ service.
// All implementations must embed UnimplementedPVZServer
// for forward compatibility
type PVZServer interface {
	AddInfo(context.Context, *AddInfoRequest) (*AddInfoResponse, error)
	DeleteInfo(context.Context, *DeleteInfoRequest) (*DeleteInfoResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	ListInfo(context.Context, *ListInfoRequest) (*ListInfoResponse, error)
	UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoResponse, error)
	mustEmbedUnimplementedPVZServer()
}

// UnimplementedPVZServer must be embedded to have forward compatible implementations.
type UnimplementedPVZServer struct {
}

func (UnimplementedPVZServer) AddInfo(context.Context, *AddInfoRequest) (*AddInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInfo not implemented")
}
func (UnimplementedPVZServer) DeleteInfo(context.Context, *DeleteInfoRequest) (*DeleteInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfo not implemented")
}
func (UnimplementedPVZServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedPVZServer) ListInfo(context.Context, *ListInfoRequest) (*ListInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfo not implemented")
}
func (UnimplementedPVZServer) UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedPVZServer) mustEmbedUnimplementedPVZServer() {}

// UnsafePVZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServer will
// result in compilation errors.
type UnsafePVZServer interface {
	mustEmbedUnimplementedPVZServer()
}

func RegisterPVZServer(s grpc.ServiceRegistrar, srv PVZServer) {
	s.RegisterService(&PVZ_ServiceDesc, srv)
}

func _PVZ_AddInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).AddInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_AddInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).AddInfo(ctx, req.(*AddInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_DeleteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).DeleteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_DeleteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).DeleteInfo(ctx, req.(*DeleteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_ListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).ListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_ListInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).ListInfo(ctx, req.(*ListInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_UpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).UpdateInfo(ctx, req.(*UpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZ_ServiceDesc is the grpc.ServiceDesc for PVZ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devtask.pvz.v1.PVZ",
	HandlerType: (*PVZServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInfo",
			Handler:    _PVZ_AddInfo_Handler,
		},
		{
			MethodName: "DeleteInfo",
			Handler:    _PVZ_DeleteInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _PVZ_GetInfo_Handler,
		},
		{
			MethodName: "ListInfo",
			Handler:    _PVZ_ListInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _PVZ_UpdateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/devtask/pvz/v1/pvz.proto",
}
