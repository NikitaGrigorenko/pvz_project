// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "devtask/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStoragePVZ is a mock of StoragePVZ interface.
type MockStoragePVZ struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePVZMockRecorder
}

// MockStoragePVZMockRecorder is the mock recorder for MockStoragePVZ.
type MockStoragePVZMockRecorder struct {
	mock *MockStoragePVZ
}

// NewMockStoragePVZ creates a new mock instance.
func NewMockStoragePVZ(ctrl *gomock.Controller) *MockStoragePVZ {
	mock := &MockStoragePVZ{ctrl: ctrl}
	mock.recorder = &MockStoragePVZMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePVZ) EXPECT() *MockStoragePVZMockRecorder {
	return m.recorder
}

// AddPVZ mocks base method.
func (m *MockStoragePVZ) AddPVZ(ctx context.Context, pvz *model.PVZ) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPVZ", ctx, pvz)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPVZ indicates an expected call of AddPVZ.
func (mr *MockStoragePVZMockRecorder) AddPVZ(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPVZ", reflect.TypeOf((*MockStoragePVZ)(nil).AddPVZ), ctx, pvz)
}

// Delete mocks base method.
func (m *MockStoragePVZ) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoragePVZMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoragePVZ)(nil).Delete), ctx, id)
}

// GetPVZ mocks base method.
func (m *MockStoragePVZ) GetPVZ(ctx context.Context, id int64) (*model.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZ", ctx, id)
	ret0, _ := ret[0].(*model.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZ indicates an expected call of GetPVZ.
func (mr *MockStoragePVZMockRecorder) GetPVZ(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZ", reflect.TypeOf((*MockStoragePVZ)(nil).GetPVZ), ctx, id)
}

// List mocks base method.
func (m *MockStoragePVZ) List(ctx context.Context) ([]model.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStoragePVZMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStoragePVZ)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockStoragePVZ) Update(ctx context.Context, pvz *model.PVZ, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pvz, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStoragePVZMockRecorder) Update(ctx, pvz, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStoragePVZ)(nil).Update), ctx, pvz, id)
}
